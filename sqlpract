-- Table: Ads

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | ad_id         | int     |
-- | user_id       | int     |
-- | action        | enum    |
-- +---------------+---------+
-- (ad_id, user_id) is the primary key for this table.
-- Each row of this table contains the ID of an Ad, the ID of a user and the action taken by this user regarding this Ad.
-- The action column is an ENUM type of ('Clicked', 'Viewed', 'Ignored').
 

-- A company is running Ads and wants to calculate the performance of each Ad.

-- Performance of the Ad is measured using Click-Through Rate (CTR) where:



-- Write an SQL query to find the ctr of each Ad.

-- Round ctr to 2 decimal points. Order the result table by ctr in descending order and by ad_id in ascending order in case of a tie.

-- The query result format is in the following example:

-- Ads table:
-- +-------+---------+---------+
-- | ad_id | user_id | action  |
-- +-------+---------+---------+
-- | 1     | 1       | Clicked |
-- | 2     | 2       | Clicked |
-- | 3     | 3       | Viewed  |
-- | 5     | 5       | Ignored |
-- | 1     | 7       | Ignored |
-- | 2     | 7       | Viewed  |
-- | 3     | 5       | Clicked |
-- | 1     | 4       | Viewed  |
-- | 2     | 11      | Viewed  |
-- | 1     | 2       | Clicked |
-- +-------+---------+---------+
-- Result table:
-- +-------+-------+
-- | ad_id | ctr   |
-- +-------+-------+
-- | 1     | 66.67 |
-- | 3     | 50.00 |
-- | 2     | 33.33 |
-- | 5     | 0.00  |
-- +-------+-------+
-- for ad_id = 1, ctr = (2/(2+1)) * 100 = 66.67
-- for ad_id = 2, ctr = (1/(1+2)) * 100 = 33.33
-- for ad_id = 3, ctr = (1/(1+1)) * 100 = 50.00
-- for ad_id = 5, ctr = 0.00, Note that ad_id = 5 has no clicks or views.
-- Note that we don't care about Ignored Ads.
-- Result table is ordered by the ctr. in case of a tie we order them by ad_id

-- Solution

drop table IF EXISTS Ads;
drop database IF EXISTS LeetCode;

CREATE DATABASE LeetCode;
USE LeetCode;
CREATE TABLE ADS(
ad_id int,
user_id int,
action VARCHAR(255),
Primary key (ad_id, user_id));
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,1,'Clicked');
INSERT INTO ADS(ad_id,user_id,action) VALUES(2,2,'Clicked');
INSERT INTO ADS(ad_id,user_id,action) VALUES(3,3,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(5,5,'Ignored');
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,7,'Ignored');
INSERT INTO ADS(ad_id,user_id,action) VALUES(2,7,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(3,5,'Clicked');
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,4,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(2,11,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,2,'Clicked');

SELECT ad_id,COUNT(*) as a
		FROM Ads
		WHERE action='Clicked'
		GROUP BY ad_id;

SELECT ad_id,COUNT(*) as cnt
		FROM Ads
		WHERE action in ('Clicked','Viewed')
		GROUP BY ad_id;


		select AD1.ad_id,AD1.Clicked ,AD2.total_count ,cast(round(((AD1.Clicked * 100.0)/ AD2.total_count),2,0) as numeric(10,2)) as CTR from ((SELECT ad_id,COUNT(*) as Clicked
		FROM Ads
 		WHERE action='Clicked'
 		GROUP BY ad_id) AD1
		inner JOIN 
		(SELECT ad_id,COUNT(*) as total_count
 		FROM Ads
 		WHERE action in ('Clicked','Viewed')
 		GROUP BY ad_id) AD2
		on AD1.ad_id=AD2.ad_id
		)

-- SELECT AD1.ad_id,(AD1.a/AD2.t)*100
-- FROM (SELECT ad_id,COUNT(*) as a
-- 		FROM Ads
-- 		WHERE action='Clicked'
-- 		GROUP BY ad_id) AD1
-- JOIN (SELECT ad_id,COUNT(*) as t
-- 		FROM Ads
-- 		WHERE action='Clicked' or action='Viewed'
-- 		GROUP BY ad_id) AD2
-- ON AD2.ad_id = AD1.ad_id;

-- from Ads select ad_id, sum(*) over(order by action)



-- Table: Ads

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | ad_id         | int     |
-- | user_id       | int     |
-- | action        | enum    |
-- +---------------+---------+
-- (ad_id, user_id) is the primary key for this table.
-- Each row of this table contains the ID of an Ad, the ID of a user and the action taken by this user regarding this Ad.
-- The action column is an ENUM type of ('Clicked', 'Viewed', 'Ignored').
 

-- A company is running Ads and wants to calculate the performance of each Ad.

-- Performance of the Ad is measured using Click-Through Rate (CTR) where:



-- Write an SQL query to find the ctr of each Ad.

-- Round ctr to 2 decimal points. Order the result table by ctr in descending order and by ad_id in ascending order in case of a tie.

-- The query result format is in the following example:

-- Ads table:
-- +-------+---------+---------+
-- | ad_id | user_id | action  |
-- +-------+---------+---------+
-- | 1     | 1       | Clicked |
-- | 2     | 2       | Clicked |
-- | 3     | 3       | Viewed  |
-- | 5     | 5       | Ignored |
-- | 1     | 7       | Ignored |
-- | 2     | 7       | Viewed  |
-- | 3     | 5       | Clicked |
-- | 1     | 4       | Viewed  |
-- | 2     | 11      | Viewed  |
-- | 1     | 2       | Clicked |
-- +-------+---------+---------+
-- Result table:
-- +-------+-------+
-- | ad_id | ctr   |
-- +-------+-------+
-- | 1     | 66.67 |
-- | 3     | 50.00 |
-- | 2     | 33.33 |
-- | 5     | 0.00  |
-- +-------+-------+
-- for ad_id = 1, ctr = (2/(2+1)) * 100 = 66.67
-- for ad_id = 2, ctr = (1/(1+2)) * 100 = 33.33
-- for ad_id = 3, ctr = (1/(1+1)) * 100 = 50.00
-- for ad_id = 5, ctr = 0.00, Note that ad_id = 5 has no clicks or views.
-- Note that we don't care about Ignored Ads.
-- Result table is ordered by the ctr. in case of a tie we order them by ad_id

-- Solution

drop table IF EXISTS Ads;
drop database IF EXISTS LeetCode;

CREATE DATABASE LeetCode;
USE LeetCode;
CREATE TABLE ADS(
ad_id int,
user_id int,
action VARCHAR(255),
Primary key (ad_id, user_id));
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,1,'Clicked');
INSERT INTO ADS(ad_id,user_id,action) VALUES(2,2,'Clicked');
INSERT INTO ADS(ad_id,user_id,action) VALUES(3,3,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(5,5,'Ignored');
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,7,'Ignored');
INSERT INTO ADS(ad_id,user_id,action) VALUES(2,7,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(3,5,'Clicked');
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,4,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(2,11,'Viewed');
INSERT INTO ADS(ad_id,user_id,action) VALUES(1,2,'Clicked');

SELECT ad_id,COUNT(*) as a
		FROM Ads
		WHERE action='Clicked'
		GROUP BY ad_id;

SELECT ad_id,COUNT(*) as cnt
		FROM Ads
		WHERE action in ('Clicked','Viewed')
		GROUP BY ad_id;


		select AD1.ad_id,AD1.Clicked ,AD2.total_count ,
		cast(round(((AD1.Clicked * 100.0)/ AD2.total_count),2,0) as numeric(10,2)) as CTR from ((SELECT ad_id,COUNT(*) as Clicked
		FROM Ads
 		WHERE action='Clicked'
 		GROUP BY ad_id) AD1
		inner JOIN 
		(SELECT ad_id,COUNT(*) as total_count
 		FROM Ads
 		WHERE action in ('Clicked','Viewed')
 		GROUP BY ad_id) AD2
		on AD1.ad_id=AD2.ad_id
		)

with total as (
select ad_id as total_ad_id,count(*) as total from Ads where action in ('Clicked','Viewed') group by ad_id),
click_count as(select ad_id as click_count_ad_id,count(*) as click_count from Ads where action in ('Clicked') group by ad_id)
select total_ad_id,total,click_count,ctr=cast(round((click_count*100.0)/total,2) as numeric(10,2)) from total join click_count on total_ad_id=click_count_ad_id;



select total_ad_id,total,click_count,ctr=cast(round((click_count*100.0)/total,2) as numeric(10,2)) from (
select ad_id as total_ad_id,count(*) as total from Ads where action in ('Clicked','Viewed') group by ad_id) total 
join (select ad_id as click_count_ad_id,count(*) as click_count from Ads where action in ('Clicked') group by ad_id) 
click_count on total_ad_id=click_count_ad_id;

--------------------------------------------------------------------------------------------------------------------------------
-- Question 2
-- Table: Views

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | article_id    | int     |
-- | author_id     | int     |
-- | viewer_id     | int     |
-- | view_date     | date    |
-- +---------------+---------+
-- There is no primary key for this table, it may have duplicate rows.
-- Each row of this table indicates that some viewer viewed an article (written by some author) on some date. 
-- Note that equal author_id and viewer_id indicate the same person.
 

-- Write an SQL query to find all the authors that viewed at least one of their own articles, sorted in ascending order by their id.

-- The query result format is in the following example:

-- Views table:
-- +------------+-----------+-----------+------------+
-- | article_id | author_id | viewer_id | view_date  |
-- +------------+-----------+-----------+------------+
-- | 1          | 3         | 5         | 2019-08-01 |
-- | 1          | 3         | 6         | 2019-08-02 |
-- | 2          | 7         | 7         | 2019-08-01 |
-- | 2          | 7         | 6         | 2019-08-02 |
-- | 4          | 7         | 1         | 2019-07-22 |
-- | 3          | 4         | 4         | 2019-07-21 |
-- | 3          | 4         | 4         | 2019-07-21 |
-- +------------+-----------+-----------+------------+

-- Result table:
-- +------+
-- | id   |
-- +------+
-- | 4    |
-- | 7    |
-- +------+

-- Solution
--drop table article_views;
create table article_views
(
article_id int,
author_id int,
viewer_id int,
view_date varchar(20)
)


insert into article_views
values
(1,3,5,'2019–08–01'),
(1,3,6,'2019–08–02'),
(2,7,7,'2019–08–01'),
(2,7,6,'2019–08–02'),
(4,7,1,'2019–07–22'),
(3,4,4,'2019–07–21'),
(3,4,4,'2019–07–21');

select author_id,* from article_views a where author_id=viewer_id 
group by article_id,author_id,viewer_id,view_date order by a.author_id asc;

select author_id as id from (
select author_id,viewer_id,row_number() over(partition by author_id,article_id,viewer_id,view_date 
order by author_id,article_id,viewer_id,view_date) as rn 
from article_views) a where rn=1 and author_id=viewer_id;

----------------------------------------------------------------------------
-- Question 39
-- Table: Prices

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | product_id    | int     |
-- | start_date    | date    |
-- | end_date      | date    |
-- | price         | int     |
-- +---------------+---------+
-- (product_id, start_date, end_date) is the primary key for this table.
-- Each row of this table indicates the price of the product_id in the period from start_date to end_date.
-- For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id.
 

-- Table: UnitsSold

-- +---------------+---------+
-- | Column Name   | Type    |
-- +---------------+---------+
-- | product_id    | int     |
-- | purchase_date | date    |
-- | units         | int     |
-- +---------------+---------+
-- There is no primary key for this table, it may contain duplicates.
-- Each row of this table indicates the date, units and product_id of each product sold. 
 

-- Write an SQL query to find the average selling price for each product.

-- average_price should be rounded to 2 decimal places.

-- The query result format is in the following example:

-- Prices table:
-- +------------+------------+------------+--------+
-- | product_id | start_date | end_date   | price  |
-- +------------+------------+------------+--------+
-- | 1          | 2019-02-17 | 2019-02-28 | 5      |
-- | 1          | 2019-03-01 | 2019-03-22 | 20     |
-- | 2          | 2019-02-01 | 2019-02-20 | 15     |
-- | 2          | 2019-02-21 | 2019-03-31 | 30     |
-- +------------+------------+------------+--------+
 
-- UnitsSold table:
-- +------------+---------------+-------+
-- | product_id | purchase_date | units |
-- +------------+---------------+-------+
-- | 1          | 2019-02-25    | 100   |
-- | 1          | 2019-03-01    | 15    |
-- | 2          | 2019-02-10    | 200   |
-- | 2          | 2019-03-22    | 30    |
-- +------------+---------------+-------+

-- Result table:
-- +------------+---------------+
-- | product_id | average_price |
-- +------------+---------------+
-- | 1          | 6.96          |
-- | 2          | 16.96         |
-- +------------+---------------+
-- Average selling price = Total Price of Product / Number of products sold.
-- Average selling price for product 1 = ((100 * 5) + (15 * 20)) / 115 = 6.96
-- Average selling price for product 2 = ((200 * 15) + (30 * 30)) / 230 = 16.96

-- Solution

create table prices
(
product_id int,
start_date date,
end_date date,
price int
)

insert into prices
values
(1,'20190217','20190228',5),
(1,'20190301','20190322',20),
(2,'20190201','20190220',15),
(2,'20190221','20190331',30);

select * from prices;
create table UnitsSold
(
product_id int,
purchase_date date,
units int
)


insert into UnitsSold
values
(1,'20190225',100),
(1,'20190301',15),
(2,'20190210',200),
(2,'20190322',30);

select * from UnitsSold;

select s.product_id --,s.purchase_date,s.units,p.price ,p.start_date ,p.end_date , 
,SUM(s.units * p.price) as total_price , SUM(s.units) as total_unit ,round(cast(SUM(s.units * p.price) as decimal)/ SUM(s.units),2)  as average
from UnitsSold s inner join prices p
on s.product_id =p.product_id
where s.purchase_date between p.start_date and  p.end_date 
--and
--s.product_id=1
group by s.product_id  --,s.purchase_date,s.units,p.price ,p.start_date ,p.end_date


SELECT UnitsSold.product_id as product_id, round(SUM(UnitsSold.units*Prices.price)/SUM(UnitsSold.units),2) as average_price
FROM UnitsSold
JOIN Prices
ON UnitsSold.product_id = Prices.product_id
WHERE UnitsSold.purchase_date between Prices.start_date and Prices.end_date
GROUP BY UnitsSold.product_id

------------------------------------------------------------------------------------------------------------------------------------------------------

-- Question 5
-- There is a table World

-- +-----------------+------------+------------+--------------+---------------+
-- | name            | continent  | area       | population   | gdp           |
-- +-----------------+------------+------------+--------------+---------------+
-- | Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |
-- | Albania         | Europe     | 28748      | 2831741      | 12960000      |
-- | Algeria         | Africa     | 2381741    | 37100000     | 188681000     |
-- | Andorra         | Europe     | 468        | 78115        | 3712000       |
-- | Angola          | Africa     | 1246700    | 20609294     | 100990000     |
-- +-----------------+------------+------------+--------------+---------------+
-- A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.

-- Write a SQL solution to output big countries' name, population and area.

-- For example, according to the above table, we should output:

-- +--------------+-------------+--------------+
-- | name         | population  | area         |
-- +--------------+-------------+--------------+
-- | Afghanistan  | 25500100    | 652230       |
-- | Algeria      | 37100000    | 2381741      |
-- +--------------+-------------+--------------+


CREATE TABLE World (
    name VARCHAR(255),
    continent VARCHAR(255),
    area INT,
    population INT,
    gdp BIGINT
);

INSERT INTO World (name, continent, area, population, gdp)
VALUES
    ('Afghanistan', 'Asia', 652230, 25500100, 20343000),
    ('Albania', 'Europe', 28748, 2831741, 12960000),
    ('Algeria', 'Africa', 2381741, 37100000, 188681000),
    ('Andorra', 'Europe', 468, 78115, 3712000),
    ('Angola', 'Africa', 1246700, 20609294, 100990000);


-- Solution
SELECT NAME, POPULATION, AREA
FROM WORLD
WHERE AREA > 3000000 OR POPULATION > 25000000
;

